/* 1. Package e importaciones */
package Analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

import Errores.Excepcion;

import Objetos.ExpresionRegular;


/* 2. Codigo para el parser, variables, metodos */
parser code 
{:
    //Clases, objetos, variables, lista, etc... en sintaxis java
    
    //Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultados = new ArrayList<String>();

    //Lista de objetos con el ID y la expresion Regular
    public List<ExpresionRegular> listaExpresiones = new ArrayList<ExpresionRegular>();
 

    //Lista de erros
    public ArrayList<Excepcion> Errores = new ArrayList();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        Errores.add(new Excepcion("Sintáctico", "Error de sintaxis detectado. Se detectó: " + s.value, s.left + "", s.right + ""));
    } 
    
    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }

    public ArrayList<Excepcion> getErrores(){
        return Errores;
    }


:}  


/* 3. Terminales */
terminal String PTCOMA,LLAVDER,LLAVIZQ;
terminal String EJEXPRE;
terminal String DOSPTS,PARDER,PARIZQ,VARIABLE;
terminal String FLECH,NOTACION,EXPOLACA;
terminal String PR_CONJ;


/* 4. No Terminales */
non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal expresion;
non terminal exppolaca;
non terminal ejempexp;


/* 5. Precedencias */


/* 6. Producciones */

start with ini; 
ini::= LLAVIZQ instrucciones LLAVDER;

instrucciones ::= instrucciones instruccion 
                  | instrucciones error
                  | instruccion
; 

instruccion ::= 
   PR_CONJ DOSPTS expresion:a FLECH expresion:b PTCOMA
    {:
    
        System.out.println("El valor de la Variable es: "+a);
    
        //Inserto en la lista el resultado de la expresión evaluada
         resultados.add("El valor de la Variable es: "+a);
         resultados.add("El valor de la Notacion es: "+b);
    :}

|   expresion:a FLECH exppolaca:b PTCOMA
{:
        System.out.println("El valor de la expresión es: "+a);
        System.out.println("El valor de la Polaca es: "+b);
    
        //Inserto en la lista el resultado de la expresión evaluada
         //resultados.add("El valor de la Expresion es: "+a);
         //listaExpresiones.add("El valor de la Polaca es: "+b);
         ExpresionRegular objExp = new ExpresionRegular(a.toString(),b.toString());
        listaExpresiones.add(objExp);  
    :}
|   expresion:a DOSPTS ejempexp:b PTCOMA
{:
        System.out.println("La expresion de prueba es: "+b);
    
        //Inserto en la lista el resultado de la expresión evaluada
        resultados.add("El valor de la Identificador es: "+a);
        resultados.add("El valor de la Ejemplo es: "+b);
    :}
|   error PTCOMA {:
        //Aqui activa el Panic Mode al encontrar un punto y coma y reporta el error sintactico
    :} 
;


expresion  ::= 
    VARIABLE:a                             {:RESULT=new String(a);:} 
|   NOTACION:a                             {:RESULT=new String(a);:}
;


exppolaca   ::=   
    VARIABLE:a                              {:RESULT=new String(a);:}                         
|   EXPOLACA:a                              {:RESULT=new String(a);:} 
;

ejempexp ::=
   EJEXPRE:a                               {:RESULT=new String(a);:}
;
